<#@ Template debug="false" Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ assembly name="F:\git-rh\RobustHaven.IntegrationTests\packages\NPEG.1.7.1\lib\NPEG.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="NPEG" #>
<#@ import namespace="NPEG.Extensions" #>
<#@ import namespace="NPEG.ApplicationExceptions" #>
<#@ import namespace="NPEG.GrammarInterpreter" #>
<#@ Output Extension="cs" #>
<#@ Include file="FeatureHelper.t4" #>

<#
var feature = GetFromFile(Model.InputFilePath);
#>
using NUnit.Framework;
using System.Threading.Tasks;
using RobustHaven.IntegrationTests.Attributes;
using RobustHaven.IntegrationTests.SeleniumExtensions;

namespace <#= Model.Namespace #>
{
	[TestFixture]
	<#foreach (var tag in feature.Tags){#>[Category("<#=tag#>")]<#}#>

	[Feature("<#=Text(feature.Title)#>")]
	public class <#=CodeLabel(feature.Title)#>FeatureTests : WebFeatureTestBase
	{<#
if (feature.Background != null)
{#>

		public override void Background()
		{
<#
	foreach (var statement in feature.Background.Gherkin)
	{
		if (statement.Key.Equals("Given", StringComparison.InvariantCultureIgnoreCase))
		{
		#>			Context.Given(new Task(() => { }), "<#=Text(statement.Message)#>");
<#}
		if (statement.Key.Equals("When", StringComparison.InvariantCultureIgnoreCase))
		{#>			Context.When(new Task(() => { }), "<#=Text(statement.Message)#>");
<#}
		if (statement.Key.Equals("Then", StringComparison.InvariantCultureIgnoreCase))
		{#>			Context.Then(new Task(() => { }), "<#=Text(statement.Message)#>");
<#}
		if (statement.Key.Equals("And", StringComparison.InvariantCultureIgnoreCase))
		{#>				Context.And(new Task(() => { }), "<#=Text(statement.Message)#>");
<#}
		if (statement.Key.Equals("But", StringComparison.InvariantCultureIgnoreCase))
		{#>				Context.But(new Task(() => { }), @"<#=Text(statement.Message)#>");
<#}
	}
#>
		}
	<#
} // feature.Background != null
#>

<#foreach (var scenario in feature.Scenarios){#>

		[Test]
		[Scenario("<#=Text(scenario.Title) #>")]
		public void <#=CodeLabel(scenario.Title)#>()
		{<#foreach (var statement in scenario.Gherkin){
	if (statement.Key.Equals("Given", StringComparison.InvariantCultureIgnoreCase)){
#>

			Context.Given(new Task(() => {
				
			}), "<#=Text(statement.Message) #>");<#}if (statement.Key.Equals("When", StringComparison.InvariantCultureIgnoreCase)){
#>

			Context.When(new Task(() => {
			
			}), "<#=Text(statement.Message) #>");<#}	if (statement.Key.Equals("Then", StringComparison.InvariantCultureIgnoreCase)){

#>

			Context.Then(new Task(() => {

			}), "<#=Text(statement.Message) #>");<#}if (statement.Key.Equals("And", StringComparison.InvariantCultureIgnoreCase)){

#>

				Context.And(new Task(() => {
				
				}), "<#=Text(statement.Message) #>");<#}if (statement.Key.Equals("But", StringComparison.InvariantCultureIgnoreCase)){

#>

				Context.But(new Task(() => {
					
				}), "<#=Text(statement.Message) #>");<#}}
#>

			Context.AddTask(new Task(() => { }));
		}
<#}#>

	}
}